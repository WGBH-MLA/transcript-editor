//=include vendor/jquery-1.12.0.min.js
//=include vendor/underscore-min.js
//=include vendor/backbone-min.js
//=include vendor/backbone.routefilter.min.js
//=include vendor/jquery.cookie.js
//=include vendor/jquery-deparam.js
//=include vendor/pubsub.min.js
//=include vendor/jquery.j-toker.min.js
//=include utilities.js
//=include components.js
//=include app.js
//=include admin/router.js
//=include views/base.js
//=include views/header.js
//=include views/footer.js
//=include views/components/*.js
//=include admin/views/**/*.js

// Analytics functions
(function() {
  window.ANALYTICS = {};

  ANALYTICS.event = function(category, ev, label, value){
    // console.log(category, ev, label, value)
    if (ga) {
      if (label && value) ga('send', 'event', category, ev, label, value);
      else if (label) ga('send', 'event', category, ev, label);
      else ga('send', 'event', category, ev);
    }
  };
})();

window.API_URL = PROJECT.apiUrl || window.location.protocol + '//' + window.location.hostname;
if (window.location.port && !PROJECT.apiUrl) window.API_URL += ':' + window.location.port

window.DEBUG = true;

window.app = {
  models: {},
  collections: {},
  views: {},
  routers: {},
  initialize: function(){
    // init auth
    var auth_provider_paths = _.object(_.map(PROJECT.authProviders, function(provider) { return [provider.name, provider.path]; }));
    $.auth.configure({
      apiUrl: API_URL,
      authProviderPaths: auth_provider_paths
    });

    // Debug
    DEBUG && console.log("Project", PROJECT);
    PubSub.subscribe('auth.validation.success', function(ev, user) {
      DEBUG && console.log('User', user);
    });

    // Force a hard refresh after sign in/out
    PubSub.subscribe('auth.oAuthSignIn.success', function(ev, msg) {
      window.location.reload(true);
    });
    PubSub.subscribe('auth.signOut.success', function(ev, msg) {
      window.location.reload(true);
    });

    // load the main router
    var mainRouter = new app.routers.DefaultRouter();

    // Enable pushState for compatible browsers
    var enablePushState = true;
    var pushState = !!(enablePushState && window.history && window.history.pushState);

    // Start backbone history
    Backbone.history = Backbone.history || new Backbone.History({});
    Backbone.history.start({
      pushState:pushState
    });

    // Backbone.history.start();
  }
};

// Init backbone app
$(function(){
  app.initialize();
});

// COMPONENTS
var COMPONENTS = (function() {
  function COMPONENTS() {
    this.init();
  }

  COMPONENTS.prototype.init = function(){
    this.selectInit();
    this.alertInit();
    this.scrollInit();
    this.stickyInit();
    this.toggleInit();
    this.toggleSoundInit();
  };

  COMPONENTS.prototype.alert = function(message, flash, target, flashDelay){
    target = target || '#primary-alert';
    flashDelay = flashDelay || 3000;

    var $target = $(target);
    $target.html('<div>'+message+'</div>').addClass('active');

    if (this.timeout) {
      clearTimeout(this.timeout);
    }

    if (flash) {
      this.timeout = setTimeout(function(){
        $target.removeClass('active');
      }, flashDelay);
    }
  };

  COMPONENTS.prototype.alertInit = function(){
    var _this = this;

    $(window).on('alert', function(e, message, flash, target, flashDelay){
      _this.alert(message, flash, target, flashDelay);
    });

    $('.alert').on('click', function(){
      $(this).removeClass('active');
    });
  };

  COMPONENTS.prototype.scrollInit = function(){
    var _this = this;

    $(window).on('scroll-to', function(e, $el, offset, delay){
      _this.scrollTo($el, offset, delay);
    });
  };

  COMPONENTS.prototype.scrollTo = function($el, offset, delay) {
    offset = offset || 0;
    delay = delay || 2000;

    $('html, body').animate({
        scrollTop: $el.offset().top - offset
    }, 2000);
  };

  COMPONENTS.prototype.select = function($selectOption){
    var $menu = $selectOption.closest('.select'),
        $active = $menu.find('.select-active'),
        $options = $menu.find('.select-option'),
        activeText = $selectOption.attr('data-active') || $selectOption.text();

    $options.removeClass('selected').attr('aria-checked', 'false');
    $selectOption.addClass('selected').attr('aria-checked', 'true');
    $active.text(activeText);
    $menu.removeClass('active');
  };

  COMPONENTS.prototype.selectInit = function(){
    var _this = this;

    // select box
    $(document).on('click', '.select-active', function(){
      _this.selectMenu($(this).closest('.select'));
    });

    // select option
    $(document).on('click', '.select-option', function(){
      _this.select($(this));
    });

    // click away
    $(document).on('click', function(e){

      // select box
      if (!$(e.target).closest('.select').length) {
        _this.selectMenusHide();
      }

    });
  };

  COMPONENTS.prototype.selectMenu = function($selectMenu){
    $selectMenu.addClass('active');
  };

  COMPONENTS.prototype.selectMenusHide = function(){
    $('.select').removeClass('active');
  };

  COMPONENTS.prototype.sticky = function(header){
    var $stickies = $('.sticky-on-scroll');

    if (!$stickies.length) return false;

    var offsetTop = header ? $(header).height() : 0;
    var windowTop = $(window).scrollTop();

    $stickies.each(function(){
      var $el = $(this),
          elTop = $el.offset().top;

      if (windowTop > elTop-offsetTop) {
        $($el.attr('data-sticky')).addClass('sticky');
      } else {
        $($el.attr('data-sticky')).removeClass('sticky');
      }
    });
  };

  COMPONENTS.prototype.stickyInit = function(){
    var _this = this;

    $(window).on('sticky-on', function(e, header){
      _this.stickyOn(header);
    });
  };

  COMPONENTS.prototype.stickyOn = function(header){
    if (this.sticky_is_on) return false;
    this.sticky_is_on = true;
    var _this = this;

    $(window).on('scroll', function(){
      _this.sticky(header);
    });
  };

  COMPONENTS.prototype.toggle = function(el){
    $(el).toggleClass('active');
  };

  COMPONENTS.prototype.toggleInit = function(){
    var _this = this;

    // toggle button
    $(document).on('click', '.toggle-active', function(e){
      e.preventDefault();
      _this.toggle($(this).attr('data-target'));
    });
  };

  COMPONENTS.prototype.toggleSound = function($el){
    var media = $el[0];

    if (media && media.muted) {
      media.muted = false;
    } else if (media) {
      media.muted = true;
    }
  };

  COMPONENTS.prototype.toggleSoundInit = function(){
    var _this = this;

    $(document).on('click', '.toggle-sound', function(e){
      e.preventDefault();
      _this.toggleSound($(this));
    });
  };

  return COMPONENTS;

})();

// Load app on ready
$(function() {
  var components = new COMPONENTS();
});

//=include vendor/jquery-1.12.0.min.js
//=include vendor/underscore-min.js
//=include vendor/backbone-min.js
//=include vendor/backbone.routefilter.min.js
//=include vendor/jquery.cookie.js
//=include vendor/jquery-deparam.js
//=include vendor/pubsub.min.js
//=include vendor/jquery.j-toker.min.js
//=include vendor/fuse.min.js
//=include utilities.js
//=include components.js
//=include analytics.js
//=include app.js
//=include router.js
//=include models/*.js
//=include collections/*.js
//=include views/**/*.js

app.routers.DefaultRouter = Backbone.Router.extend({

  routes: {
    "":                             "index",
    "?*queryString":                "index",
    "transcripts/:id":              "transcriptEdit",
    "transcripts/:id?*queryString": "transcriptEdit",
    "page/:id":                     "pageShow",
    "dashboard":                    "dashboard",
  },

  before: function( route, params ) {
    $('#main').empty().addClass('loading');
  },

  after: function( route, params ) {
    window.scrollTo(0, 0);
  },

  dashboard: function(){
    var data = this._getData(data);
    var header = new app.views.Header(data);
    var main = new app.views.Dashboard(data);
    var footer = new app.views.Footer(data);
    main.$el.attr('role', 'main');
  },

  index: function(queryString) {
    var data = this._getData(data);
    if (queryString) data.queryParams = deparam(queryString);
    var header = new app.views.Header(data);
    var main = new app.views.Home(data);
    var footer = new app.views.Footer(data);
  },

  pageShow: function(id){
    var data = this._getData(data);
    var header = new app.views.Header(data);
    var main = new app.views.Page(_.extend({}, data, {el: '#main', page_key: id}));
    var footer = new app.views.Footer(data);
    main.$el.removeClass('loading').attr('role', 'main');
  },

  transcriptEdit: function(id, queryString) {
    var data = this._getData(data);
    if (queryString) data.queryParams = deparam(queryString);
    var header = new app.views.Header(data);
    var toolbar = new app.views.TranscriptToolbar(_.extend({}, data, {el: '#secondary-navigation', menu: 'transcript_edit'}));
    var modals = new app.views.Modals(data);
    var footer = new app.views.Footer(data);

    var verifyView = new app.views.TranscriptLineVerify(data);
    modals.addModal(verifyView.$el);

    var flagView = new app.views.TranscriptLineFlag(data);
    modals.addModal(flagView.$el);

    var downloadView = new app.views.TranscriptDownload(_.extend({}, data, {transcript_id: id}));
    modals.addModal(downloadView.$el);

    var transcript_model = new app.models.Transcript({id: id});
    var main = new app.views.TranscriptEdit(_.extend({}, data, {el: '#main', model: transcript_model}));
  },

  _getData: function(data){

    var user = {};
    if ($.auth.user && $.auth.user.signedIn) {
      user = $.auth.user;
    }

    data = data || {};
    data = $.extend({}, {project: PROJECT, user: user, debug: DEBUG, route: this._getRouteData()}, data);

    DEBUG && console.log('Route', data.route);

    return data;
  },

  _getRouteData: function(){
    var Router = this,
        fragment = Backbone.history.fragment,
        routes = _.pairs(Router.routes),
        route = null, action = null, params = null, matched, path;

    matched = _.find(routes, function(handler) {
      action = _.isRegExp(handler[0]) ? handler[0] : Router._routeToRegExp(handler[0]);
      return action.test(fragment);
    });

    if(matched) {
      params = Router._extractParameters(action, fragment);
      route = matched[0];
      action = matched[1];
    }

    path = fragment ? '/#/' + fragment : '/';

    return {
      route: route,
      action: action,
      fragment : fragment,
      path: path,
      params : params
    };
  }

});

// Plugin: add "playing" property for media
Object.defineProperty(HTMLMediaElement.prototype, 'playing', {
  get: function(){
    return !!(this.currentTime > 0 && !this.paused && !this.ended && this.readyState > 2);
  }
});

// Plugin: get input selection (http://stackoverflow.com/a/2897510/5578115)
(function($) {
  $.fn.getInputSelection = function() {
    var input = this.get(0);
    var selection = {start: 0, end: 0, text: ''};
    if (!input) return; // No (input) element found
    if ('selectionStart' in input) {
      // Standard-compliant browsers
      selection.start = input.selectionStart;
      selection.end = input.selectionEnd;
      selection.text = input.value.substring(selection.start, selection.end);
    } else if (document.selection) {
      // IE
      input.focus();
      var sel = document.selection.createRange();
      var selLen = document.selection.createRange().text.length;
      sel.moveStart('character', -input.value.length);
      selection.start = sel.text.length - selLen;
      selection.end = selection.start + selLen;
      selection.text = sel.text;
    }
    return selection;
  }
})(jQuery);

(function($) {
  $.fn.setInputPosition = function(position) {
    var input = this.get(0);
    if (!input) return; // No (input) element found
    input.focus();
    if ('selectionStart' in input) {
      // Standard-compliant browsers
      input.setSelectionRange(position, position);
    } else if (input.createTextRange) {
      // IE
      var sel = input.createTextRange();
      sel.move('character', position);
      sel.select();
    }
  }
})(jQuery);

(function($) {
  $.fn.getTextSize = function() {
    var id = 'text-width-tester',
        text = this.val(),
        $tag = $('#' + id),
        styles = {
          fontWeight: this.css('font-weight'),
          fontSize: this.css('font-size'),
          fontFamily: this.css('font-family'),
          display: 'none'
        };
    if (!$tag.length) {
      $tag = $('<span id="' + id + '">' + text + '</span>');
      $tag.css(styles);
      $('body').append($tag);
    } else {
      $tag.css(styles).html(text);
    }
    return {
      width: $tag.width(),
      height: $tag.height()
    }
  }
})(jQuery);

// Utility functions
(function() {
  window.UTIL = {};

  UTIL.escapeInput = function(str){
    return str.replace(/"/g, '&quot;')
  };

  UTIL.formatDate = function(str) {
    var d = new Date(str);
    return d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();
  };

  UTIL.formatNumber = function(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };

  UTIL.formatNumberTiny = function(num, dec) {
    if (!dec && dec!==0) dec = 1;
    var formatted = num;
    if (num > 1000000) formatted = UTIL.round(num/1000000, dec) + 'M+';
    else if (num == 1000000) formatted = '1M';
    else if (num > 99999) formatted = UTIL.round(num/1000) + 'K+';
    else if (num > 1000) formatted = UTIL.round(num/1000, dec) + 'K+';
    else if (num == 1000) formatted = '1K';
    return formatted;
  };

  // Format seconds -> hh:mm:ss
  UTIL.formatTime = function(seconds, dec) {
    var s = seconds || 0,
        h = parseInt(Math.floor(s / 3600)) % 24,
        m = parseInt(Math.floor(s / 60)) % 60,
        s = UTIL.round(s % 60, dec),
        string;

    // create format hh:mm:ss
    string = (h > 0 ? h + ':' : '') + (m < 10 ? '0' + m : m) + ':' + (s < 10 ? '0' + s : s);
    // remove starting zeros
    if (string[0] == '0') string = string.substring(1, string.length);
    return string;
  };

  // Format seconds -> 1h 20m
  UTIL.formatTimeAlt = function(seconds) {
    var s = seconds || 0,
        h = parseInt(Math.floor(s / 3600)) % 24,
        m = parseInt(Math.floor(s / 60)) % 60,
        s = UTIL.round(s % 60),
        string;
    // create format 1h 20m
    if (m > 0) {
      string = (h > 0 ? h + 'h ' : '') + m + 'm';
    } else {
      string = s + 's';
    }
    return string;
  };

  UTIL.formatTimeMs = function(milliseconds, dec) {
    return UTIL.formatTime(milliseconds*0.001, dec);
  };

  // Convert hh:mm:ss -> seconds
  UTIL.getSeconds = function(string, dec) {
    var parts = string.split(':').reverse(),
        seconds = 0;
    // go from hh:mm:ss to seconds
    for (var i=parts.length-1; i>=0; i--) {
      switch( i ) {
        case 2: // hours
          seconds += parseInt(parts[i]) * 60 * 60;
          break;
        case 1: // minutes
          seconds += parseInt(parts[i]) * 60;
          break;
        case 0: // seconds
          seconds += parseFloat(parts[i]);
          break
        default:
          break;
      }
    }
    return UTIL.round(seconds, dec);
  };

  UTIL.highlightText = function(needle, haystack, open, close) {
    open = open || '<span>';
    close = close || '</span>';
    var regex = new RegExp('('+needle+')', 'ig');
    return haystack.replace(regex, open+"$1"+close);
  };

  // Make a random id
  UTIL.makeId = function(length){
    var text = "",
        alpha = "abcdefghijklmnopqrstuvwxyz",
        alphanum = "abcdefghijklmnopqrstuvwxyz0123456789",
    length = length || 8;
    for(var i=0; i < length; i++) {
      if (i <= 0) { // must start with letter
        text += alpha.charAt(Math.floor(Math.random() * alpha.length));
      } else {
        text += alphanum.charAt(Math.floor(Math.random() * alphanum.length));
      }
    }
    return text;
  };

  UTIL.randomNumber = function(length){
    return Math.floor(Math.pow(10, length-1) + Math.random() * 9 * Math.pow(10, length-1));
  };

  // Round to decimal
  UTIL.round = function(num, dec) {
    num = parseFloat(num);
    dec = dec || 0;
    return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
  };

})();
